# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
#
# See https://github.com/Microsoft/azure-pipelines-tasks/issues/8798 for the solution to download files

jobs:

- job: 'Test'
  pool:
    vmImage: 'vs2017-win2016'  # other options: 'macOS-10.13', 'Ubuntu 16.04', 'vs2017-win2016'
  strategy:
    matrix:
      Python27:
        browser: 'Ie'
        robot.options: '--xunit results.xml --xunitskipnoncritical --dotted'
        python.version: '2.7'
      Python36:
        browser: 'Ie'
        robot.options: '--xunit results.xml --xunitskipnoncritical --dotted'
        python.version: '3.6'
      Python37:
        browser: 'Ie'
        robot.options: '--xunit results.xml --xunitskipnoncritical --dotted'
        python.version: '3.7'
    maxParallel: 3
    
  steps:
  - task: PythonScript@0
    inputs:
      url: 'http://selenium-release.storage.googleapis.com/3.141/IEDriverServer_Win32_3.141.0.zip'
      fileName: '$(Build.SourcesDirectory)IEDriverServer_Win32.zip'
      scriptSource: 'inline'
      script: from urllib.request import urlretrieve; urlretrieve('$(url)', '$(fileName)')
      displayName: 'Get IeDriverServer'

  - task: ExtractFiles@0
    inputs:
      archiveFilePatterns: '*.zip' 
      destinationFolder: $(Build.SourcesDirectory)
      #cleanDestinationFolder: true 
      displayName: 'Extract IeDriverServer'
      Path: $(Build.SourcesDirectory);$(Path)

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip && pip install robotstatuschecker && pip install -r requirements-dev.txt
    displayName: 'Install dependencies'

  - script: |
      python atest/run.py $(browser) --interpreter python $(robot.options)
    displayName: 'acceptance tests'

  - task: PublishTestResults@0
    inputs:
      testResultsFiles: '**/atest/results/results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

- job: 'Publish'
  dependsOn: 'Test'
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - task: UsePythonVersion@1
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - script: python setup.py sdist
    displayName: 'Build sdist'
